/**
 * Created by dell on 8/5/2016.
 */
var q           = require('q'),
    _           = require('underscore'),
    roles       = require('../config/role-config.js');

var helper = {};

/*-------------------------------------------------------
 A HELPER METHOD TO CREATE STANDARD USER OBJECT TO BE SENT TO THE CLIENT
 PARAMS:
 [user - User object that contains all the details for the user]
 -------------------------------------------------------*/
helper.createResponseUser = function(user){
    var response = {};
    
    if(user.local){
        response.firstname = user.local.firstname || null;
        response.lastname = user.local.lastname || null;
    }
    response.email = user.email || null;
    response.role = user.role || null;
    response.username = user.username || null;
    response.isActive = user.isActive || null;
    response._id = user._id || null;

    return response;
};

/*-------------------------------------------------------
 A HELPER METHOD TO CREATE STANDARD ERROR OBJECT TO BE SENT TO THE CLIENT
 PARAMS:
 [err - err array that contains all the details for the errors]
 [message - a general message if err is not an array]
 -------------------------------------------------------*/
helper.createResponseError = function(err, message){
    var response = [];
    //if err is an array of errors generated by validator
    if(err instanceof Array){
        err.forEach(function(err){
            response.push({error: err.error});
        });
    }
    else{
        response.push({error: message});
    }
    return response;
};

/*-------------------------------------------------------
 A HELPER METHOD TO CHECK IF THE USER IS A REGULAR USER OF NOT
 PARAMS:
 [user - User object that contains all the details for the user]
 -------------------------------------------------------*/
helper.isRegularUser = function(user){
    var deferred = q.defer();
    process.nextTick(function(){
        // if(user.role.indexOf(roles.admin) > -1 || user.role.indexOf(roles.support) > -1)
        if(user.role.includes(roles.admin) || user.role.includes(roles.support))
            deferred.resolve(false);
        else
            deferred.resolve(true);
    });
    return deferred.promise;
};



//============================================================
//====================FUNCTIONAL==============================
//============================================================

helper.sortByKey = function(key, order, asc, list){
    return function(list){
        return order === asc ? list.sort(function(a,b){return b[key] <= a[key]}) : list.sort(function(a,b){return b[key] >= a[key]});
    }
};

helper.compose = function(){
    var args = Array.prototype.slice.call(arguments);
    return function(value){
        return args.reverse().reduce(function(seed, func){ return func(seed); }, value);
    }
};

helper.itemsPerPage = function(page, size, list){
    return function(list){
        return list.slice((page - 1) * size, ((page - 1) * size) + size);
    }
}

helper.isOrDefault = function(check, fallback){
    return check || fallback;
}

helper.intify = function (value){
    return parseInt(value);
}

helper.getFromBody = function(property){
    return function(req){
        return helper.getFromReq(req, 'body', property);
    }
}

helper.getFromParams = function(property){
    return function(req){
        return helper.getFromReq(req, 'params', property);
    }
}

helper.getFromQuery = function(property){
    return function(req){
        return helper.getFromReq(req, 'query', property);
    }
}

helper.getFromReq = function(req, part, property){
    return req[part][property];
}

helper.createError = function(err){
    return !_.isArray(err) ? {errors: [{error : err}]} : {errors: err };
}

module.exports = helper;