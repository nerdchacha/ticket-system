/**
 * Created by dell on 8/5/2016.
 */
var q               = require('q'),
    _               = require('underscore'),
    rolesEnum       = require('../config/enum-config.js').roles;

var helper = {};

/*-------------------------------------------------------
 A HELPER METHOD TO CREATE STANDARD USER OBJECT TO BE SENT TO THE CLIENT
 PARAMS:
 [user - User object that contains all the details for the user]
 -------------------------------------------------------*/
helper.createResponseUser = function(user){
    var response = {};
    if(!user)
        throw [{error: 'No user with given details found'}];
    if(user.local){
        response.firstname = user.local.firstname || null;
        response.lastname = user.local.lastname || null;
    }
    response.email = user.email || null;
    response.role = user.role || null;
    response.username = user.username || null;
    response.isActive = user.isActive || null;
    response._id = user._id || null;

    return response;
};

/*-------------------------------------------------------
 A HELPER METHOD TO CREATE STANDARD ERROR OBJECT TO BE SENT TO THE CLIENT
 PARAMS:
 [err - err array that contains all the details for the errors]
 [message - a general message if err is not an array]
 -------------------------------------------------------*/
helper.createResponseError = function(err, message){
    var response = [];
    console.log(err);
    //if err is an array of errors generated by validator
    if(err instanceof Array){
        err.forEach(function(err){
            response.push({error: err.error});
        });
    }
    else{
        response.push({error: message});
    }
    return response;
};

/*-------------------------------------------------------
 A HELPER METHOD TO CHECK IF THE USER IS A REGULAR USER OF NOT
 PARAMS:
 [user - User object that contains all the details for the user]
 -------------------------------------------------------*/
helper.isRegularUser = user => {
    var deferred = q.defer();
    process.nextTick(function(){
        if(user.role.indexOf(rolesEnum.admin) > -1 || user.role.indexOf(rolesEnum.support) > -1)
            deferred.resolve(true);
        else
            deferred.resolve(false);
    });
    return deferred.promise;
};

/*-------------------------------------------------------
 A HELPER METHOD TO CHECK IF THE USER IS A SUPPORT USER OF NOT
 PARAMS:
 [user - User object that contains all the details for the user]
 -------------------------------------------------------*/
helper.isSupportUser = user => {
    var deferred = q.defer();
    process.nextTick(function(){
        if(user.role.indexOf(rolesEnum.admin) > -1 || user.role.indexOf(rolesEnum.support) > -1)
            deferred.resolve();
        else
            deferred.reject(403);
    });
    return deferred.promise;
};


//============================================================
//====================FUNCTIONAL==============================
//============================================================

helper.getSort = req => {
    return req.query.sort ? req.query.sort : 'id';
}

helper.getOrder = req => {
    return req.query.order ? req.query.order : 'asc';
}

helper.getPage = req => {
    return req.query.page ? parseInt(req.query.page) : 1;
}

helper.getSize= req => {
    return req.query.size ? parseInt(req.query.size) : 10;
}

helper.createSortString = (sort, order) => {
    return order === 'asc' ? sort : '-' + sort;
}

module.exports = helper;